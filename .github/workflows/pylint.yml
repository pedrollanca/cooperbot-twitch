name: Code Quality with Pylint

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  lint:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint
        # Install project dependencies for better analysis
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
        
    - name: Create .pylintrc config
      run: |
        cat > .pylintrc << 'EOF'
        [MASTER]
        # Use multiple processes for faster execution
        jobs=0
        
        # Ignore test files and migrations for certain checks
        ignore-patterns=.*_test\.py,test_.*\.py,tests/.*\.py
        
        [MESSAGES CONTROL]
        # Enable useful extensions
        load-plugins=pylint.extensions.docparams,pylint.extensions.mccabe
        
        # Disable specific checks that are too strict for this type of project
        disable=
            # Documentation (enable for production code)
            missing-module-docstring,
            missing-class-docstring,
            missing-function-docstring,
            
            # Import organization (handled by other tools like isort)
            wrong-import-order,
            ungrouped-imports,
            
            # Too restrictive for Twitch bot
            too-few-public-methods,
            too-many-arguments,
            too-many-locals,
            too-many-branches,
            too-many-statements,
            
            # Allow longer lines for readability
            line-too-long,
            
            # Common in async code
            broad-except,
            
            # Allow f-strings and format strings
            logging-fstring-interpolation,
            consider-using-f-string,
            
            # Bot-specific allowances
            unused-argument,  # Event handlers often have unused params
            attribute-defined-outside-init,  # Common in bot initialization
            
            # Test-specific (applies to test files)
            redefined-outer-name,
            protected-access,
            
        [FORMAT]
        max-line-length=100
        max-module-lines=500
        
        [DESIGN]
        max-args=8
        max-locals=20
        max-returns=6
        max-branches=15
        max-statements=50
        max-parents=7
        max-attributes=10
        min-public-methods=1
        max-public-methods=25
        max-bool-expr=5
        
        [SIMILARITIES]
        min-similarity-lines=6
        ignore-comments=yes
        ignore-docstrings=yes
        ignore-imports=yes
        
        [VARIABLES]
        # Allow shorter variable names in certain contexts
        good-names=i,j,k,ex,Run,_,id,db,ok,e,f
        
        [BASIC]
        # Allow more flexible naming
        good-names-rgxs=^[_a-z][_a-z0-9]*$
        class-rgx=[A-Z_][a-zA-Z0-9]+$
        function-rgx=[a-z_][a-z0-9_]*$
        method-rgx=[a-z_][a-z0-9_]*$
        const-rgx=(([A-Z_][A-Z0-9_]*)|(__.*__))$
        attr-rgx=[a-z_][a-z0-9_]*$
        argument-rgx=[a-z_][a-z0-9_]*$
        variable-rgx=[a-z_][a-z0-9_]*$
        module-rgx=(([a-z_][a-z0-9_]*)|([A-Z][a-zA-Z0-9]+))$
        
        EOF
        
    - name: Run Pylint on main code
      run: |
        # Only lint the main Python files, not test files
        find . -name "*.py" -not -path "./tests/*" -not -path "./.venv/*" -not -path "./venv/*" | xargs pylint --output-format=colorized --reports=y
        
    - name: Run Pylint on tests (with relaxed rules)
      run: |
        # Run pylint on test files with more permissive settings
        if [ -d "tests" ]; then
          pylint tests/ --disable=missing-docstring,redefined-outer-name,protected-access,unused-argument,too-many-arguments,duplicate-code --output-format=colorized
        fi
        
    - name: Generate Pylint badge score
      if: matrix.python-version == '3.11'
      run: |
        score=$(pylint $(find . -name "*.py" -not -path "./tests/*" -not -path "./.venv/*") --output-format=text --reports=y | grep "Your code has been rated" | sed 's/.*rated at \([0-9.]*\).*/\1/')
        echo "Pylint Score: $score/10"
        echo "PYLINT_SCORE=$score" >> $GITHUB_ENV
